import { useState, useEffect, useCallback } from 'react';
import { useGoogleDrive } from './useGoogleDrive';

const numberVideos = 20;

// Importa o tipo DriveVideo do hook
interface DriveVideo {
  id: string;
  name: string;
  size: string;
  createdTime: string;
  modifiedTime: string;
  mimeType: string;
  webViewLink: string;
  webContentLink?: string;
  videoMediaMetadata?: {
    width?: number;
    height?: number;
    durationMillis?: string;
  };
}

interface PreparedVideo {
  id: string;
  scheduleId: string;
  outputPath: string;
  downloadUrl?: string;
  jobId?: string;
  status: 'preparing' | 'ready' | 'error';
  createdAt: string;
  sourceVideos: string[];
  totalDuration?: number;
  videosProcessed?: number;
  error?: string;
  hasAudio?: boolean; // Indicates if the final video includes generated audio
  hasBackgroundMusic?: boolean; // Indicates if the final video includes background music
  hasSubtitles?: boolean; // Indicates if the final video includes automatic subtitles
  subtitles?: {
    mode: 'vtt' | 'burn' | 'none';
    vtt?: {
      filename: string;
      url: string; // ex.: "/api/subtitles/subs_<jobId>.vtt"
    } | null;
  };
  generatedScript?: {
    script: string;
    theme: string;
    tokensUsed: number;
    generatedAt: string;
  };
  // generatedAudio removed - audio files are now temporary and deleted after use
  youtubeUpload?: {
    videoId: string;
    videoUrl: string;
    title: string;
    description: string;
    privacyStatus: string;
    uploadedAt: string;
  };
}

interface ScheduleEntry {
  id: string;
  time: string;
  frequency: string;
  status: 'active' | 'paused';
  nextRun: string;
  lastRun?: string;
}

// Backend API configuration
const BACKEND_URL = 'http://localhost:3001/api';

export const useVideoPreparation = (
  schedules: ScheduleEntry[],
  openaiApiKey?: string,
  elevenLabsApiKey?: string,
  youtubeApiKey?: string,
  enableSubtitles: boolean = true,
  subtitleMode: 'vtt' | 'burn' | 'none' = 'vtt'
) => {
  const [preparedVideos, setPreparedVideos] = useState<PreparedVideo[]>([]);
  const [isPreparingVideo, setIsPreparingVideo] = useState(false);
  const [preparationLogs, setPreparationLogs] = useState<string[]>([]);
  const { videos, isAuthenticated, getAccessToken } = useGoogleDrive();

  // Adiciona log de prepara√ß√£o
  const addLog = useCallback((message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    setPreparationLogs(prev => [...prev, logMessage]);
    console.log('Video Preparation:', logMessage);
  }, []);

  // Fun√ß√£o para gerar script automaticamente ap√≥s prepara√ß√£o do v√≠deo
  const generateScriptForVideo = useCallback(async (videoNames: string[], scheduleId: string): Promise<any> => {
    if (!openaiApiKey) {
      addLog('‚ö†Ô∏è Chave da OpenAI n√£o fornecida, pulando gera√ß√£o autom√°tica de script');
      return null;
    }

    try {
      addLog('ü§ñ Gerando script automaticamente para o v√≠deo...');
      
      // Cria um prompt baseado nos nomes dos v√≠deos usados
      const videoContext = videoNames.length > 0 
        ? `Baseado nos v√≠deos: ${videoNames.join(', ')}`
        : 'V√≠deo motivacional geral';
      
      const prompt = `Crie um roteiro motivacional para um v√≠deo inspirador de m√©dia dura√ß√£o. ${videoContext}. 
      Desenvolva uma narrativa envolvente e concisa com 4000-6000 caracteres que resulte em 6-8 minutos de √°udio motivacional. 
      O conte√∫do deve ser positivo, inspirador e adequado para pessoas que buscam crescimento pessoal e desenvolvimento. 
      Inclua hist√≥rias, exemplos pr√°ticos, reflex√µes e conselhos aplic√°veis. Mantenha o engajamento durante toda a narra√ß√£o com conte√∫do direto e impactante.`;

      const response = await fetch(`${BACKEND_URL}/generate-script`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt,
          openaiApiKey,
          theme: 'motivacional',
          duration: '6-8 minutos',
          style: 'inspiracional e envolvente',
          language: 'portugu√™s brasileiro'
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `HTTP ${response.status}`);
      }

      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.script || 'Falha na gera√ß√£o do script');
      }

      addLog(`‚úÖ Script gerado automaticamente! Tokens: ${result.metadata.tokensUsed}`);
      addLog(`üìù === SCRIPT GERADO ===`);
      
      // Divide o script em linhas para melhor formata√ß√£o nos logs
      const scriptLines = result.script.split('\n');
      scriptLines.forEach((line, index) => {
        if (line.trim()) {
          addLog(`üìù ${line.trim()}`);
        } else if (index < scriptLines.length - 1) {
          addLog(`üìù `); // Linha em branco
        }
      });
      
      addLog(`üìù === FIM DO SCRIPT ===`);
      
      return {
        script: result.script,
        theme: result.options.theme,
        tokensUsed: result.metadata.tokensUsed,
        generatedAt: result.metadata.generatedAt
      };

    } catch (error) {
      addLog(`‚ùå Erro na gera√ß√£o autom√°tica do script: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      return null;
    }
  }, [openaiApiKey, addLog]);

  // Fun√ß√£o para gerar t√≠tulo e descri√ß√£o do YouTube usando OpenAI
  const generateYouTubeMetadata = useCallback(async (script: string): Promise<any> => {
    if (!openaiApiKey) {
      addLog('‚ö†Ô∏è Chave da OpenAI n√£o fornecida, usando t√≠tulo e descri√ß√£o padr√£o');
      return {
        title: `V√≠deo Motivacional - ${new Date().toLocaleDateString()}`,
        description: `üåü V√≠deo motivacional gerado automaticamente\n\nü§ñ Gerado por AI Video Studio\n\n#motivacional #dailydream #ai #inspira√ß√£o`
      };
    }

    try {
      addLog('üì∫ Gerando t√≠tulo e descri√ß√£o para YouTube...');
      
      const prompt = `Baseado no seguinte script de v√≠deo motivacional, crie:
1. Um t√≠tulo atrativo para YouTube (m√°ximo 60 caracteres)
2. Uma descri√ß√£o envolvente (m√°ximo 200 caracteres)

Script: "${script}"

Formato da resposta:
T√çTULO: [t√≠tulo aqui]
DESCRI√á√ÉO: [descri√ß√£o aqui]

O t√≠tulo deve ser chamativo e otimizado para SEO. A descri√ß√£o deve incluir emojis e hashtags relevantes.`;

      const response = await fetch(`${BACKEND_URL}/generate-script`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt,
          openaiApiKey,
          theme: 'youtube metadata',
          duration: 'breve',
          style: 'otimizado para redes sociais',
          language: 'portugu√™s brasileiro'
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const result = await response.json();
      
      if (!result.success) {
        throw new Error('Falha na gera√ß√£o do metadata');
      }

      // Parse da resposta
      const text = result.script;
      const titleMatch = text.match(/T√çTULO:\s*(.+)/i);
      const descriptionMatch = text.match(/DESCRI√á√ÉO:\s*(.+)/i);
      
      const title = titleMatch ? titleMatch[1].trim() : `V√≠deo Motivacional - ${new Date().toLocaleDateString()}`;
      const description = descriptionMatch ? descriptionMatch[1].trim() : `üåü Conte√∫do motivacional\n\n#motivacional #inspira√ß√£o #dailydream`;
      
      addLog(`‚úÖ T√≠tulo gerado: "${title}"`);
      addLog(`‚úÖ Descri√ß√£o gerada: "${description}"`);
      
      return { title, description };

    } catch (error) {
      addLog(`‚ùå Erro na gera√ß√£o do metadata do YouTube: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      return {
        title: `V√≠deo Motivacional - ${new Date().toLocaleDateString()}`,
        description: `üåü V√≠deo motivacional gerado automaticamente\n\nü§ñ Gerado por AI Video Studio\n\n#motivacional #dailydream #ai #inspira√ß√£o`
      };
    }
  }, [openaiApiKey, addLog]);

  // Fun√ß√£o para fazer upload do v√≠deo para o YouTube
  const uploadToYouTube = useCallback(async (videoFilename: string, title: string, description: string): Promise<any> => {
    if (!youtubeApiKey) {
      addLog('‚ö†Ô∏è Chave da API do YouTube n√£o fornecida, pulando upload');
      return null;
    }

    try {
      addLog('üì∫ Iniciando upload autom√°tico para YouTube...');
      addLog(`üé¨ Arquivo: ${videoFilename}`);
      addLog(`üìù T√≠tulo: ${title}`);
      addLog(`üìÑ Descri√ß√£o: ${description.substring(0, 100)}...`);
      
      const response = await fetch(`${BACKEND_URL}/upload-to-youtube`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          filename: videoFilename,
          title,
          description,
          tags: ['motivacional', 'inspira√ß√£o', 'dailydream', 'ai', 'desenvolvimento pessoal'],
          privacyStatus: 'public',
          categoryId: '22', // People & Blogs
          youtubeCredentials: {
            accessToken: youtubeApiKey,
            clientId: '', // Deixe vazio se n√£o tiver
            clientSecret: '', // Deixe vazio se n√£o tiver
            redirectUri: 'http://localhost:8080'
          }
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `HTTP ${response.status}`);
      }

      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.message || 'Falha no upload para YouTube');
      }

      addLog(`‚úÖ Upload para YouTube conclu√≠do!`);
      addLog(`üì∫ Video ID: ${result.youtube.videoId}`);
      addLog(`üîó URL: ${result.youtube.videoUrl}`);
      addLog(`üîí Status: ${result.youtube.privacyStatus}`);
      
      return {
        videoId: result.youtube.videoId,
        videoUrl: result.youtube.videoUrl,
        title: result.youtube.title,
        description: result.youtube.description,
        privacyStatus: result.youtube.privacyStatus,
        uploadedAt: new Date().toISOString()
      };

    } catch (error) {
      addLog(`‚ùå Erro no upload para YouTube: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      return null;
    }
  }, [youtubeApiKey, addLog]);

  // Seleciona v√≠deos aleat√≥rios (qualquer dura√ß√£o)
  const selectRandomVideos = useCallback((count: number = numberVideos) => {
    if (!videos || videos.length === 0) {
      addLog('Nenhum v√≠deo dispon√≠vel no Google Drive');
      return [];
    }

    // Filtra apenas arquivos de v√≠deo v√°lidos (sem restri√ß√£o de dura√ß√£o)
    const videoFiles = videos.filter(video => {
      if (!video.mimeType?.startsWith('video/') || !video.webContentLink) {
        return false;
      }
      
      // Aceita qualquer v√≠deo com metadata ou sem metadata de dura√ß√£o
      return true;
    });

    if (videoFiles.length === 0) {
      addLog('Nenhum arquivo de v√≠deo encontrado no Google Drive');
      return [];
    }

    // Seleciona v√≠deos aleat√≥rios
    const shuffled = [...videoFiles].sort(() => Math.random() - 0.5);
    const selected = shuffled.slice(0, Math.min(count, videoFiles.length));
    
    addLog(`Selecionados ${selected.length} arquivos de ${videoFiles.length} dispon√≠veis`);
    selected.forEach((video, index) => {
      const duration = video.videoMediaMetadata?.durationMillis 
        ? `${Math.round(parseInt(video.videoMediaMetadata.durationMillis) / 1000)}s`
        : 'dura√ß√£o desconhecida';
      addLog(`  ${index + 1}. ${video.name} (${duration})`);
    });
    
    return selected;
  }, [videos, addLog]);

  // Combina v√≠deos usando FFmpeg real no backend
  const combineVideosWithFFmpeg = useCallback(async (selectedVideos: DriveVideo[], scheduleId: string): Promise<any> => {
    try {
      addLog('üöÄ Iniciando combina√ß√£o REAL com FFmpeg no backend...');
      
      // Debug: verificar se as chaves de API est√£o chegando
      addLog(`üîë === DEBUGGING API KEYS NO FRONTEND ===`);
      addLog(`üîç OpenAI API Key: ${openaiApiKey ? `‚úÖ Exists (${openaiApiKey.length} chars)` : '‚ùå Missing/Undefined'}`);
      addLog(`üîç ElevenLabs API Key: ${elevenLabsApiKey ? `‚úÖ Exists (${elevenLabsApiKey.length} chars)` : '‚ùå Missing/Undefined'}`);
      if (openaiApiKey) {
        addLog(`üîë OpenAI Preview: ${openaiApiKey.substring(0, 8)}...${openaiApiKey.substring(openaiApiKey.length - 4)}`);
      }
      if (elevenLabsApiKey) {
        addLog(`üîë ElevenLabs Preview: ${elevenLabsApiKey.substring(0, 8)}...${elevenLabsApiKey.substring(elevenLabsApiKey.length - 4)}`);
      }
      addLog(`üîë === END API KEYS DEBUG ===`);
      
      // Verificar se est√° autenticado
      if (!isAuthenticated) {
        throw new Error('Usu√°rio n√£o est√° autenticado no Google Drive');
      }
      
      addLog('üìã Verificando token de acesso do Google Drive...');
      
      // Obter token de acesso do Google usando o hook
      const accessToken = await getAccessToken();
      
      if (!accessToken) {
        addLog('‚ùå Falha ao obter token de acesso');
        throw new Error('Token de acesso n√£o dispon√≠vel');
      }
      
      addLog('‚úÖ Token de acesso obtido com sucesso');
      addLog(`üîë Token: ${accessToken.substring(0, 20)}...`);
      
      addLog(`üì§ Enviando ${selectedVideos.length} v√≠deos para o backend...`);
      
      // Lista os v√≠deos que ser√£o combinados
      selectedVideos.forEach((video, index) => {
        const duration = video.videoMediaMetadata?.durationMillis 
          ? `${Math.round(parseInt(video.videoMediaMetadata.durationMillis) / 1000)}s`
          : 'dura√ß√£o desconhecida';
        addLog(`  üìπ V√≠deo ${index + 1}: ${video.name} (${duration}) - ID: ${video.id}`);
      });
      
      // Prepara payload para o backend
      const payload = {
        videos: selectedVideos.map(video => ({
          id: video.id,
          name: video.name,
          duration: video.videoMediaMetadata?.durationMillis || '0'
        })),
        accessToken,
        scheduleId,
        openaiApiKey, // Inclui a chave da OpenAI para gera√ß√£o autom√°tica de script
        elevenLabsApiKey, // Inclui a chave da ElevenLabs para gera√ß√£o de √°udio
        enableSubtitles, // Inclui a op√ß√£o de legendas autom√°ticas
        subtitleMode: 'burn', 
      };
      
      addLog(`üì¶ Payload para backend: ${JSON.stringify(payload, null, 2).substring(0, 200)}...`);
      addLog(`üåê URL do backend: ${BACKEND_URL}/combine-videos`);
      
      // Chama o backend para processar os v√≠deos
      const response = await fetch(`${BACKEND_URL}/combine-videos`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `HTTP ${response.status}`);
      }
      
      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error || 'Falha no processamento do backend');
      }
      
      addLog(`‚úÖ FFmpeg conclu√≠do! Arquivo: ${result.filename}`);
      addLog(`üìä Tamanho: ${result.fileSize || 'desconhecido'}`);
      addLog(`‚è±Ô∏è  Dura√ß√£o total: ${result.totalDuration}s`);
      addLog(`üé¨ V√≠deos processados: ${result.videosProcessed}`);
      
      // Se um script foi gerado no backend, exibe nos logs
      if (result.generatedScript) {
        addLog(`üìù === SCRIPT GERADO NO BACKEND ===`);
        const scriptLines = result.generatedScript.script.split('\n');
        scriptLines.forEach((line: string) => {
          if (line.trim()) {
            addLog(`üìù ${line.trim()}`);
          } else {
            addLog(`üìù `); // Linha em branco
          }
        });
        addLog(`üìù === FIM DO SCRIPT ===`);
        addLog(`ü§ñ Tokens utilizados: ${result.generatedScript.tokensUsed}`);
      }
      
      // Informa√ß√µes sobre √°udio (agora tempor√°rio)
      if (result.hasAudio && elevenLabsApiKey) {
        addLog(`üéµ === √ÅUDIO GERADO E INTEGRADO ===`);
        addLog(`üé§ √Åudio foi gerado e integrado ao v√≠deo final`);
        addLog(`üóëÔ∏è Arquivo de √°udio tempor√°rio foi exclu√≠do ap√≥s uso`);
        addLog(`ÔøΩ Apenas o v√≠deo final est√° dispon√≠vel para download`);
        addLog(`üéµ === FIM DO √ÅUDIO ===`);
      } else if (elevenLabsApiKey && !result.hasAudio) {
        addLog(`‚ö†Ô∏è ElevenLabs configurado mas √°udio n√£o foi usado no v√≠deo final (verifique logs do servidor)`);
      } else {
        addLog(`‚ö†Ô∏è ElevenLabs API key n√£o fornecida - √°udio n√£o foi gerado`);
      }
      
      // Indica se o v√≠deo final inclui √°udio gerado
      if (result.hasAudio) {
        addLog(`üé¨üéµ V√≠deo final combinado com √°udio gerado! Dura√ß√£o ajustada automaticamente.`);
      }
      
      // Indica se o v√≠deo final inclui m√∫sica de fundo
      if (result.hasBackgroundMusic) {
        addLog(`üéµüé∂ V√≠deo final inclui M√öSICA DE FUNDO gerada automaticamente!`);
        addLog(`üéº Tom ambiente de 220Hz mixado com volume baixo para n√£o interferir.`);
      } else {
        addLog(`‚ö†Ô∏è M√∫sica de fundo n√£o foi adicionada (verifique logs do servidor)`);
      }
      
      // Legendas
      if (result.hasSubtitles) {
        if (result?.subtitles?.mode === 'vtt' && result?.subtitles?.vtt?.url) {
          const base = BACKEND_URL.replace('/api', '');
          const vttUrl = `${base}${result.subtitles.vtt.url}`;
          addLog(`üìù‚ú® LEGENDAS VTT DISPON√çVEIS! Use <track src="${vttUrl}" kind="subtitles" ... /> no <video>`);
          addLog(`üîó VTT: ${vttUrl}`);
        } else if (result?.subtitles?.mode === 'burn') {
          addLog(`üìùüî• Legenda QUEIMADA no arquivo final (n√£o precisa <track>)`);
        } else {
          addLog(`üìù Legendas geradas.`);
        }
      } else if (enableSubtitles && result.hasAudio) {
        addLog(`‚ö†Ô∏è Legendas habilitadas mas n√£o foram adicionadas (verifique se script foi gerado)`);
      } else if (!enableSubtitles) {
        addLog(`üìù‚ùå Legendas desabilitadas nas configura√ß√µes`);
      }
      
      // Usa a URL de download fornecida pelo backend
      const downloadUrl = `${BACKEND_URL.replace('/api', '')}${result.downloadUrl}`;
      addLog(`üì• URL de download: ${downloadUrl}`);
      
      // Retorna o objeto completo com todas as informa√ß√µes
      return {
        downloadUrl,
        hasAudio: result.hasAudio || false,
        hasBackgroundMusic: result.hasBackgroundMusic || false,
        hasSubtitles: result.hasSubtitles || false,
        subtitles: result.subtitles ?? undefined,
        generatedScript: result.generatedScript || null,
        // generatedAudio is no longer saved as it's temporary and deleted after use
        fileSize: result.fileSize,
        totalDuration: result.totalDuration,
        videosProcessed: result.videosProcessed
      };
      
    } catch (error) {
      addLog(`‚ùå Erro na combina√ß√£o real dos arquivos: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      return null;
    }
  }, [addLog, getAccessToken, isAuthenticated, openaiApiKey, elevenLabsApiKey, enableSubtitles, subtitleMode]);

  // Prepara v√≠deo para um agendamento usando FFmpeg real
  const prepareVideoForSchedule = useCallback(async (schedule: ScheduleEntry) => {
    if (!isAuthenticated) {
      addLog('‚ùå Usu√°rio n√£o autenticado no Google Drive');
      return false;
    }

    setIsPreparingVideo(true);
    addLog(`üé¨ Iniciando prepara√ß√£o REAL de v√≠deo para agendamento: ${schedule.id}`);

    try {
      // 1. Primeiro, gera o script motivacional usando OpenAI
      let generatedScript = null;
      if (openaiApiKey) {
        try {
          addLog('ü§ñ Gerando script motivacional antes do processamento de v√≠deo...');
          addLog(`üîë OpenAI API Key dispon√≠vel: ${openaiApiKey.substring(0, 8)}...`);
          
          const prompt = `Crie um roteiro motivacional para um v√≠deo inspirador de desenvolvimento pessoal. 
          O v√≠deo ser√° usado em um agendamento de postagem autom√°tica para redes sociais. 
          Desenvolva uma narrativa envolvente e concisa com 4000-6000 caracteres que resulte em 6-8 minutos de √°udio motivacional.
          Crie algo que motive, inspire e engaje o p√∫blico interessado em crescimento pessoal e produtividade.
          Inclua hist√≥rias, exemplos pr√°ticos, reflex√µes e conselhos aplic√°veis de forma direta e impactante.
          
          Agendamento: ${schedule.frequency} √†s ${schedule.time}
          Data pr√≥xima execu√ß√£o: ${new Date(schedule.nextRun).toLocaleDateString('pt-BR')}`;

          addLog(`üì° Enviando requisi√ß√£o para ${BACKEND_URL}/generate-script...`);
          
          const response = await fetch(`${BACKEND_URL}/generate-script`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              prompt,
              openaiApiKey,
              theme: 'motivacional',
              duration: '6-8 minutos',
              style: 'inspiracional e envolvente',
              language: 'portugu√™s brasileiro'
            }),
          });

          addLog(`üì° Response status: ${response.status} ${response.statusText}`);

          if (response.ok) {
            const result = await response.json();
            addLog(`üìã Response data: success=${result.success}`);
            
            if (result.success) {
              generatedScript = {
                script: result.script,
                theme: result.options.theme,
                tokensUsed: result.metadata.tokensUsed,
                generatedAt: result.metadata.generatedAt
              };

              addLog(`‚úÖ Script gerado com sucesso! Tokens: ${result.metadata.tokensUsed}`);
              addLog(`üìù === SCRIPT GERADO ===`);
              
              // Divide o script em linhas para melhor forma
              const scriptLines = result.script.split('\n');
              scriptLines.forEach((line, index) => {
                if (line.trim()) {
                  addLog(`üìù ${line.trim()}`);
                } else if (index < scriptLines.length - 1) {
                  addLog(`üìù `);
                }
              });
              
              addLog(`üìù === FIM DO SCRIPT ===`);
            } else {
              addLog(`‚ùå Backend retornou success=false: ${result.error || 'Erro desconhecido'}`);
            }
          } else {
            const errorText = await response.text();
            addLog(`‚ùå Erro HTTP ${response.status}: ${errorText}`);
          }
        } catch (scriptError) {
          addLog(`‚ö†Ô∏è Erro ao gerar script inicial: ${scriptError instanceof Error ? scriptError.message : 'Erro desconhecido'}`);
          addLog(`üîÑ Continuando com processamento do v√≠deo...`);
        }
      } else {
        addLog('‚ö†Ô∏è Chave da OpenAI n√£o fornecida - pulando gera√ß√£o de script inicial');
      }

      // 2. Seleciona at√© ${numberVideos} arquivos para combina√ß√£o real
      const selectedVideos = selectRandomVideos(numberVideos);
      if (selectedVideos.length === 0) {
        throw new Error('Nenhum arquivo selecionado para combina√ß√£o');
      }

      if (selectedVideos.length < 2) {
        addLog(`‚ö†Ô∏è  Apenas ${selectedVideos.length} arquivo encontrado, mas continuando...`);
      } else if (selectedVideos.length === numberVideos) {
        addLog(`‚úÖ M√°ximo de ${numberVideos} arquivos selecionados para combina√ß√£o`);
      }

      // 3. Chama o backend para fazer download + combina√ß√£o com FFmpeg real
      addLog('üîÑ Enviando para backend: download + FFmpeg...');
      const result = await combineVideosWithFFmpeg(selectedVideos, schedule.id);
      
      if (!result || !result.downloadUrl) {
        throw new Error('Falha na combina√ß√£o real dos arquivos com FFmpeg');
      }

      // 3. Script j√° foi gerado automaticamente no backend durante a combina√ß√£o
      addLog('üìù Script gerado automaticamente no backend durante processamento FFmpeg');

      // 4. Salva informa√ß√µes do v√≠deo preparado (inclui script e √°udio se dispon√≠veis)
      const preparedVideo: PreparedVideo = {
        id: Date.now().toString(),
        scheduleId: schedule.id,
        outputPath: result.downloadUrl,
        downloadUrl: result.downloadUrl,
        status: 'ready',
        createdAt: new Date().toISOString(),
        sourceVideos: selectedVideos.map(v => v.name),
        totalDuration: result.totalDuration,
        videosProcessed: result.videosProcessed,
        hasAudio: result.hasAudio || false,
        hasBackgroundMusic: result.hasBackgroundMusic || false,
        hasSubtitles: result.hasSubtitles || false,
        subtitles: result.subtitles ?? undefined,
        generatedScript: result.generatedScript || generatedScript || undefined,
        // generatedAudio is no longer included as it's temporary
      };

      setPreparedVideos(prev => [...prev, preparedVideo]);
      addLog(`‚úÖ V√≠deo REAL preparado com sucesso! ID: ${preparedVideo.id}`);
      addLog(`üéØ Resultado: Concatena√ß√£o real de ${selectedVideos.length} v√≠deos via FFmpeg`);
      
      if (preparedVideo.hasAudio) {
        addLog(`üé¨üéµ V√çDEO COMBINADO COM √ÅUDIO! O v√≠deo final inclui narra√ß√£o gerada automaticamente.`);
        addLog(`‚è±Ô∏è Dura√ß√£o do v√≠deo foi ajustada para coincidir com a dura√ß√£o do √°udio.`);
      }
      
      if (preparedVideo.hasBackgroundMusic) {
        addLog(`üéµüé∂ M√öSICA DE FUNDO ADICIONADA! O v√≠deo inclui m√∫sica ambiente de fundo.`);
      }
      
      if (preparedVideo.subtitles?.mode === 'vtt' && preparedVideo.subtitles?.vtt?.url) {
        const base = BACKEND_URL.replace('/api', '');
        addLog(`üìù VTT pronto: ${base}${preparedVideo.subtitles.vtt.url}`);
      } else if (preparedVideo.subtitles?.mode === 'burn') {
        addLog('üìùüî• Legenda foi QUEIMADA no arquivo final.');
      }

      if (preparedVideo.generatedScript || generatedScript) {
        const scriptToUse = preparedVideo.generatedScript || generatedScript;
        addLog(`üìù Script foi gerado com ${scriptToUse.tokensUsed} tokens!`);
        
        if (preparedVideo.hasAudio && preparedVideo.hasBackgroundMusic) {
          addLog(`üé¨üéµüé§üé∂ V√≠deo + √Åudio + Script + M√∫sica prontos! V√≠deo completo com narra√ß√£o e m√∫sica de fundo.`);
        } else if (preparedVideo.hasAudio) {
          addLog(`üé¨üéµüé§ V√≠deo + √Åudio + Script prontos! O v√≠deo j√° tem narra√ß√£o incorporada.`);
        } else if (preparedVideo.hasBackgroundMusic) {
          addLog(`üé¨üìùüé∂ V√≠deo + Script + M√∫sica prontos! Use o script para legendas/descri√ß√£o.`);
        } else {
          addLog(`üé¨üìù V√≠deo + Script prontos! Use o script para legendas/descri√ß√£o.`);
        }
      } else {
        addLog(`‚ö†Ô∏è Script n√£o foi gerado (verifique se a chave da OpenAI est√° configurada)`);
        
        if (preparedVideo.hasAudio && preparedVideo.hasBackgroundMusic) {
          addLog(`üé¨üéµüé∂ V√≠deo completo com √°udio e m√∫sica pronto para download!`);
        } else if (preparedVideo.hasAudio) {
          addLog(`üé¨üéµ V√≠deo com √°udio pronto para download!`);
        } else if (preparedVideo.hasBackgroundMusic) {
          addLog(`üé¨üé∂ V√≠deo com m√∫sica de fundo pronto para download!`);
        } else {
          addLog(`üé¨ V√≠deo pronto para download!`);
        }
      }
      
      // Audio files are no longer available for separate download (they're temporary)
      addLog(`üé§ Arquivo de √°udio foi integrado ao v√≠deo e exclu√≠do (n√£o dispon√≠vel separadamente).`);
      
      // Log summary of all available files
      try {
        addLog(`\nüìã === LISTANDO TODOS OS ARQUIVOS DISPON√çVEIS ===`);
        const summaryResponse = await fetch(`${BACKEND_URL}/files/summary`);
        if (summaryResponse.ok) {
          const summaryData = await responseToJsonSafe(summaryResponse);
          if (summaryData?.success) {
            const { summary } = summaryData;
            addLog(`üìä Total de arquivos: ${summary.totalFiles}`);
            addLog(`üìπ V√≠deos: ${summary.videoCount} | üéµ Com m√∫sica: ${summary.withMusicCount} | üîä √Åudios: ${summary.audioCount}`);
            addLog(`üíæ Espa√ßo total: ${summary.totalSizeMB.toFixed(1)}MB`);
            if (summary.newestFile) {
              addLog(`üÜï Arquivo mais recente: ${summary.newestFile.filename} (${summary.newestFile.sizeMB}MB)`);
            }
            addLog(`üîó Acesse a aba "Downloads" para gerenciar todos os arquivos`);
          }
        }
        addLog(`üìã === FIM DA LISTA ===\n`);
      } catch (summaryError) {
        addLog(`‚ö†Ô∏è Erro ao obter resumo de arquivos: ${summaryError instanceof Error ? summaryError.message : 'Erro desconhecido'}`);
      }

      // 5. Upload autom√°tico para YouTube (se API key estiver dispon√≠vel e v√°lida)
      let youtubeUploadResult = null;
      if (youtubeApiKey && youtubeApiKey.length > 50 && (preparedVideo.generatedScript || generatedScript)) {
        try {
          addLog('üì∫ === INICIANDO UPLOAD AUTOM√ÅTICO PARA YOUTUBE ===');
          
          // Gerar t√≠tulo e descri√ß√£o usando OpenAI
          const scriptToUse = preparedVideo.generatedScript || generatedScript;
          const youtubeMetadata = await generateYouTubeMetadata(scriptToUse.script);
          
          // Extrair nome do arquivo do outputPath
          const videoFilename = preparedVideo.outputPath 
            ? preparedVideo.outputPath.split('/').pop() || `video_${preparedVideo.scheduleId}_${preparedVideo.id}.mp4`
            : `video_${preparedVideo.scheduleId}_${preparedVideo.id}.mp4`;
          
          // Fazer upload para YouTube
          youtubeUploadResult = await uploadToYouTube(
            videoFilename,
            youtubeMetadata.title,
            youtubeMetadata.description
          );
          
          if (youtubeUploadResult) {
            addLog('üéâ UPLOAD PARA YOUTUBE CONCLU√çDO COM SUCESSO!');
            addLog(`üì∫ V√≠deo p√∫blico dispon√≠vel em: ${youtubeUploadResult.videoUrl}`);
            
            // Atualizar o v√≠deo preparado com informa√ß√µes do YouTube
            preparedVideo.youtubeUpload = youtubeUploadResult;
            
            // Atualizar o state com as informa√ß√µes do YouTube
            setPreparedVideos(prev => 
              prev.map(pv => 
                pv.id === preparedVideo.id 
                  ? { ...pv, youtubeUpload: youtubeUploadResult }
                  : pv
              )
            );
          }
          
        } catch (youtubeError) {
          addLog(`‚ùå Erro no upload para YouTube: ${youtubeError instanceof Error ? youtubeError.message : 'Erro desconhecido'}`);
          addLog('‚ö†Ô∏è V√≠deo foi preparado com sucesso, mas n√£o foi postado no YouTube');
        }
      } else if (!youtubeApiKey) {
        addLog('‚ö†Ô∏è API key do YouTube n√£o fornecida - pulando upload autom√°tico');
      } else {
        addLog('‚ö†Ô∏è Script n√£o dispon√≠vel - necess√°rio para gerar t√≠tulo/descri√ß√£o do YouTube');
      }
      
      return true;

    } catch (error) {
      addLog(`‚ùå Erro na prepara√ß√£o REAL do v√≠deo: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      
      // Salva erro
      const errorVideo: PreparedVideo = {
        id: Date.now().toString(),
        scheduleId: schedule.id,
        outputPath: '',
        status: 'error',
        createdAt: new Date().toISOString(),
        sourceVideos: [],
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
      
      setPreparedVideos(prev => [...prev, errorVideo]);
      return false;
      
    } finally {
      setIsPreparingVideo(false);
    }
  }, [isAuthenticated, selectRandomVideos, combineVideosWithFFmpeg, addLog, generateScriptForVideo, generateYouTubeMetadata, uploadToYouTube, youtubeApiKey, openaiApiKey, elevenLabsApiKey]);

  // Verifica se precisa preparar v√≠deos (1 hora antes)
  useEffect(() => {
    const checkSchedules = () => {
      const now = new Date();
      const oneHourFromNow = new Date(now.getTime() + 60 * 60 * 1000); // 1 hora √† frente
      
      schedules.forEach(schedule => {
        if (schedule.status !== 'active') return;
        
        const nextRun = new Date(schedule.nextRun);
        
        // Verifica se est√° dentro da janela de 1 hora antes
        if (now <= nextRun && nextRun <= oneHourFromNow) {
          // Verifica se j√° existe v√≠deo preparado para este agendamento
          const hasPreppedVideo = preparedVideos.some(
            pv => pv.scheduleId === schedule.id && pv.status === 'ready'
          );
          
          if (!hasPreppedVideo && !isPreparingVideo) {
            addLog(`Agendamento ${schedule.id} precisa de prepara√ß√£o em 1 hora`);
            prepareVideoForSchedule(schedule);
          }
        }
      });
    };

    // Verifica a cada 5 minutos
    const interval = setInterval(checkSchedules, 5 * 60 * 1000);
    
    // Verifica imediatamente
    checkSchedules();
    
    return () => clearInterval(interval);
  }, [schedules, preparedVideos, isPreparingVideo, prepareVideoForSchedule, addLog]);

  // Fun√ß√£o manual para preparar v√≠deo
  const manualPrepareVideo = useCallback((scheduleId: string) => {
    const schedule = schedules.find(s => s.id === scheduleId);
    if (schedule) {
      prepareVideoForSchedule(schedule);
    }
  }, [schedules, prepareVideoForSchedule]);

  // Limpa logs antigos
  useEffect(() => {
    const cleanOldLogs = () => {
      setPreparationLogs(prev => prev.slice(-50)); // Mant√©m apenas os √∫ltimos 50 logs
    };
    
    const interval = setInterval(cleanOldLogs, 10 * 60 * 1000); // A cada 10 minutos
    return () => clearInterval(interval);
  }, []);

  return {
    preparedVideos,
    isPreparingVideo,
    preparationLogs,
    manualPrepareVideo,
    clearLogs: () => setPreparationLogs([])
  };
};

// Helper para parse seguro
async function responseToJsonSafe(res: Response) {
  try {
    return await res.json();
  } catch {
    return null;
  }
}
